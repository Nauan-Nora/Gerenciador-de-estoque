🧾 Gerenciador de Estoque com Interface Gráfica
Este é um sistema de controle de estoque simples e funcional, desenvolvido em Python com interface gráfica usando CustomTkinter e integração com Excel (.xlsx) via OpenPyXL. O sistema permite cadastrar, pesquisar, visualizar e excluir produtos diretamente de uma planilha.

📦 Funcionalidades
✅ Cadastro de novos produtos (código, nome, preço, quantidade e valor de venda)

🔍 Pesquisa de itens na tabela

🗑️ Exclusão de produtos

📄 Visualização de todos os produtos cadastrados

💾 Armazenamento automático dos dados em uma planilha Excel (dados.xlsx)

🌗 Suporte a tema claro e escuro

🎨 Interface amigável com CustomTkinter

🖼️ Interface
A interface é composta por:

Tela principal: onde o usuário escolhe ações como visualizar estoque ou cadastrar produto.

Formulário de cadastro: campos de entrada para código, nome, preço, quantidade e valor de venda.

Tabela TreeView: exibição do estoque em tempo real, com suporte a rolagem, seleção e pesquisa.

Botões interativos: para cadastrar, apagar, voltar ao menu e pesquisar.

📁 Estrutura do Projeto
bash
Copiar
Editar
📂 projeto/
│
├── 📄 main.py              # Código principal do sistema
├── 📄 dados.xlsx           # Planilha Excel onde os dados são salvos
├── 📂 assets/
│   └── icon.ico            # Ícone do aplicativo
├── 📄 README.md            # Este arquivo
🧰 Requisitos
Python 3.8+

Bibliotecas:

bash
Copiar
Editar
pip install customtkinter openpyxl
Obs: kivy.uix.treeview é importado mas não utilizado neste código. Pode ser removido caso não haja uso futuro planejado.

⚙️ Como Usar
Certifique-se de que o arquivo dados.xlsx existe na mesma pasta do script e contém os cabeçalhos:

mathematica
Copiar
Editar
Código | Nome | Preço | Quantidade | Valor de Venda
Execute o script:

bash
Copiar
Editar
python main.py
A interface será exibida. A partir daí, você pode:

Cadastrar novos produtos

Visualizar a tabela

Pesquisar produtos

Apagar itens selecionados

🔐 Validações
Os campos de entrada são obrigatórios.

Os tipos dos dados são verificados (ex: código como int, preço como float).

O sistema mostra mensagens de erro com messagebox em caso de falhas.

🧑‍💻 Para Desenvolvedores
A interface foi construída com CustomTkinter, o que garante um design moderno e responsivo.

Os dados são manipulados com a biblioteca openpyxl, que permite alterar e salvar diretamente arquivos Excel.

O projeto usa uma abordagem modular, onde funções como cadastrar_produto, mostrar_estoque, apagar_item, e verifica_preenchimento cuidam de tarefas específicas.

⚠️ Observações
Sempre utilize ponto no lugar da vírgula ao inserir valores decimais.

Verifique se o Excel não está aberto ao executar o script, para evitar conflitos de escrita.

📌 Melhorias Futuras
Atualização de produtos existentes

Filtros e ordenação avançada

Exportação em PDF ou CSV

Login de usuário

Dashboard com gráficos

🧑‍🏫 Autor
💻 [Seu Nome Aqui]

📧 E-mail: [noranauan@gmail.com]

💬 Instagram / GitHub: [@nauan.nora]